{"version":3,"file":"static/js/274.d39fd8a4.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/loader/Loader.jsx","components/filter/FormFilter.jsx","components/contactForm/ContactForm.styled.js","components/contactForm/ContactForm.jsx","components/contactsList/ContactsList.styled.js","components/App.styled.js","components/contactsList/ContactsList.jsx","pages/ContactsPage.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const filterSelector = state => (state = state.filter.filter);\nexport const contactsSelector = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = createSelector([filterSelector], filter => filter);\n\nexport const selectorContacts = createSelector(\n  [contactsSelector, filterSelector],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Puff } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Puff\n      height=\"80\"\n      width=\"80\"\n      radius={1}\n      color=\"#3f78b9\"\n      ariaLabel=\"puff-loading\"\n      wrapperStyle={{\n        position: 'absolute',\n        top: '340px',\n        left: 'calc(50% - 40px)',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { filter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const contactFilter = useSelector(selectFilter);\n\n  return (\n    <input\n      value={contactFilter}\n      type=\"text\"\n      name=\"filter\"\n      onChange={evt => dispatch(filter(evt.target.value))}\n    />\n  );\n};\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  font-size: 12px;\n  line-height: 1.15;\n  letter-spacing: 0.02em;\n  max-width: 200px;\n`;\n\nexport const StyledForm = styled(Form)`\n  margin: 0 auto;\n  padding: 48px;\n  display: flex;\n  gap: 24px;\n  flex-direction: column;\n\n  border: 1px solid black;\n  align-items: center;\n\n  max-width: 380px;\n`;\nexport const Input = styled(Field)`\n  width: 200px;\n`;\nexport const FormBtn = styled.button`\n  padding: 6px;\n  width: 120px;\n  font-size: 12px;\n  line-height: 1.15;\n  letter-spacing: 0.02em;\n  cursor: pointer;\n  text-transform: capitalize;\n  border-radius: 8px;\n  background-color: #6495ed;\n  color: white;\n  &&:hover {\n    color: black;\n  }\n`;\n\nexport const StyledGroup = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4 px;\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport 'yup-phone-lite';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { contactsSelector } from 'redux/contacts/selectors';\n\nimport {\n  Error,\n  StyledForm,\n  FormBtn,\n  StyledGroup,\n  Input,\n} from './ContactForm.styled';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too Short!').required('Name is required'),\n  number: Yup.string()\n    .phone('UA', 'Please enter a valid phone number like (067-356-4454) ')\n    .required('A phone number is required'),\n});\n\nconst initialValue = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelector);\n\n  const formSubmitHandler = ({ name, number }) => {\n    if (\n      contacts.some(items => items.name.toUpperCase() === name.toUpperCase())\n    ) {\n      alert(`${name} is already  in contact`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n  };\n\n  return (\n    <Formik\n      initialValues={initialValue}\n      validationSchema={FormSchema}\n      onSubmit={(values, action) => {\n        formSubmitHandler(values);\n\n        action.resetForm();\n      }}\n    >\n      <StyledForm>\n        <StyledGroup>\n          Name\n          <Input name=\"name\" type=\"text\" />\n          <Error name=\"name\" component=\"span\" />\n        </StyledGroup>\n\n        <StyledGroup>\n          Number\n          <Input\n            name=\"number\"\n            type=\"text\"\n            placeholder=\"067-356-4454\"\n            maxLength=\"13\"\n          />\n          <Error name=\"number\" component=\"span\" />\n        </StyledGroup>\n\n        <FormBtn type=\"submit\">add contact</FormBtn>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 12px;\n  align-items: center;\n`;\n\nexport const ListBtn = styled.button`\n  padding: 8px;\n  width: 60px;\n  font-size: 12px;\n  line-height: 1.15;\n  letter-spacing: 0.02em;\n  cursor: pointer;\n  text-transform: capitalize;\n  border-radius: 8px;\n  background-color: #6495ed;\n  color: white;\n  &&:hover {\n    color: black;\n  }\n`;\n\nexport const ListText = styled.p`\n  font-size: 18px;\n  line-height: 1.5;\n  font-weight: 500;\n  letter-spacing: 0.02em;\n  text-transform: capitalize;\n  display: block;\n`;\nexport const ListNumber = styled.span`\n  font-size: 18px;\n  line-height: 1.5;\n  font-weight: 500;\n  letter-spacing: 0.02em;\n  text-transform: capitalize;\n  display: block;\n`;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin: 0 auto;\n  max-width: 480px;\n  position: relative;\n`;\n\nexport const ItemWrapper = styled.ul`\n  padding: 12px;\n\n  display: block;\n  align-items: center;\n  position: absolute;\n`;\n\nexport const ContactsTitle = styled.h2`\n  margin-top: 84px;\n`;\nexport const TextError = styled.b`\n  color: red;\n  display: block;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectorContacts } from 'redux/contacts/selectors';\n\nimport { ListBtn, ListItem, ListNumber, ListText } from './ContactsList.styled';\nimport { ItemWrapper } from 'components/App.styled';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectorContacts);\n\n  return (\n    <ItemWrapper>\n      {contacts.map(({ name, number, id }) => {\n        return (\n          <ListItem key={id}>\n            <ListText>{name}</ListText> :<ListNumber>{number}</ListNumber>\n            <ListBtn onClick={() => dispatch(deleteContact(id))} type=\"button\">\n              delete\n            </ListBtn>\n          </ListItem>\n        );\n      })}\n    </ItemWrapper>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchContacts } from 'redux/contacts/operations.js';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors.js';\n\nimport { Loader } from '../components/loader/Loader.jsx';\nimport { Filter } from '../components/filter/FormFilter.jsx';\nimport { ContactForm } from '../components/contactForm/ContactForm.jsx';\nimport { ContactsList } from '../components/contactsList/ContactsList.jsx';\nimport { ContactsTitle, TextError, Wrapper } from '../components/App.styled.js';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Wrapper>\n      <h1>Phone book</h1>\n      <ContactForm />\n      {isLoading && !error && <Loader />}\n      <ContactsTitle>Contacts</ContactsTitle>\n      <Filter />\n      {error ? (\n        <TextError>Oоps you have a problem ...</TextError>\n      ) : (\n        <ContactsList />\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Contacts;\n"],"names":["filterSelector","state","filter","contactsSelector","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","createSelector","selectorContacts","_ref","name","toLowerCase","includes","Loader","_jsx","Puff","height","width","radius","color","ariaLabel","wrapperStyle","position","top","left","wrapperClass","visible","Filter","dispatch","useDispatch","contactFilter","useSelector","value","type","onChange","evt","target","Error","styled","ErrorMessage","_templateObject","_taggedTemplateLiteral","StyledForm","Form","_templateObject2","Input","Field","_templateObject3","FormBtn","_templateObject4","StyledGroup","_templateObject5","FormSchema","Yup","shape","min","required","number","phone","initialValue","ContactForm","Formik","initialValues","validationSchema","onSubmit","values","action","some","toUpperCase","alert","concat","addContact","formSubmitHandler","resetForm","children","_jsxs","component","placeholder","maxLength","ListItem","ListBtn","ListText","ListNumber","Wrapper","ItemWrapper","ContactsTitle","TextError","ContactsList","map","id","onClick","deleteContact","useEffect","fetchContacts"],"sourceRoot":""}